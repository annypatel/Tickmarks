apply plugin: "com.github.ben-manes.versions"

buildscript {
    def appVersion = [
        'major': 1,
        'minor': 0,
        'patch': 0,
        'build': 0,
    ]

    // Build configuration
    ext.buildConfig = [
        'minSdk'     : 21,
        'compileSdk' : 28,
        'targetSdk'  : 28,
        'versionName': "${appVersion.major}.${appVersion.minor}.${appVersion.patch}",
        'versionCode': appVersion.major * 1000000 + appVersion.minor * 10000 + appVersion.patch * 100 + appVersion.build
    ]

    // Dependency versions
    ext.versions = [
        'agp'            : '4.0.1',
        'kotlin'         : '1.4.10',
        'spotless'       : '5.5.2',
        'ktlint'         : '0.23.1',
        'gvp'            : '0.33.0',
        'rxJava'         : '2.2.19',
        'rxKotlin'       : '2.4.0',
        'rxAndroid'      : '2.1.1',
        'dagger'         : '2.29.1',
        'okhttp'         : '4.9.0',
        'retrofit'       : '2.9.0',
        'retrocrawler'   : '1.0.0-alpha1',
        'jspoon'         : '1.3.2',
        'lifecycle'      : '2.2.0',
        'room'           : '2.2.5',
        'appcompat'      : '1.2.0',
        'fragment'       : '1.2.5',
        'material'       : '1.2.1',
        'databindLint'   : '1.0.0-alpha1',
        'junit'          : '4.13',
        'mockito'        : '2.1.0',
        'robolectric'    : '4.2',
        'junitAndroid'   : '1.1.2',
        'archCoreTesting': '2.1.0',
        'bindingMapper'  : '1.0.0-alpha1',
        'rxidler'        : '0.11.0',
        'espresso'       : '3.3.0',
        'testCore'       : '1.3.0',
        'testRunner'     : '1.3.0',
        'testRules'      : '1.3.0'
    ]

    // Dependencies
    ext.deps = [
        'kotlin'      : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin",
        'rx'          : [
            'java'   : "io.reactivex.rxjava2:rxjava:$versions.rxJava",
            'kotlin' : "io.reactivex.rxjava2:rxkotlin:$versions.rxKotlin",
            'android': "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid",
        ],
        'dagger'      : [
            'runtime'        : "com.google.dagger:dagger:$versions.dagger",
            'compiler'       : "com.google.dagger:dagger-compiler:$versions.dagger",
            'androidRuntime' : "com.google.dagger:dagger-android-support:$versions.dagger",
            'androidCompiler': "com.google.dagger:dagger-android-processor:$versions.dagger"
        ],
        'okhttp'      : [
            'client': "com.squareup.okhttp3:okhttp:${versions.okhttp}"
        ],
        'retrofit'    : [
            'client'       : "com.squareup.retrofit2:retrofit:$versions.retrofit",
            'adapterRxJava': "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
        ],
        'retrocrawler': [
            'converter': "com.github.annypatel.retrocrawler:converter-jspoon:$versions.retrocrawler",
            'jspoon'   : "pl.droidsonroids:jspoon:$versions.jspoon"
        ],
        'lifecycle'   : [
            'viewModelKtx': "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle",
            'extensions'  : "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
        ],
        'room'        : [
            'runtime' : "androidx.room:room-runtime:$versions.room",
            'compiler': "androidx.room:room-compiler:$versions.room",
            'rx'      : "androidx.room:room-rxjava2:$versions.room"
        ],
        'appcompat'   : "androidx.appcompat:appcompat:$versions.appcompat",
        'fragment'    : "androidx.fragment:fragment-ktx:$versions.fragment",
        'material'    : "com.google.android.material:material:$versions.material",
        'databindLint': "com.github.annypatel.databinding:lint-checks:$versions.databindLint",

        'test'        : [
            'junit'          : "junit:junit:$versions.junit",
            'mockito'        : "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockito",
            'archCoreTesting': "androidx.arch.core:core-testing:$versions.archCoreTesting",
            'robolectric'    : "org.robolectric:robolectric:$versions.robolectric",
            'junitAndroid'   : "androidx.test.ext:junit:$versions.junitAndroid",
            'bindingMapper'  : "com.github.annypatel.databinding:binding-mapper:$versions.bindingMapper",
            'core'           : "androidx.test:core-ktx:$versions.testCore",
            'runner'         : "androidx.test:runner:$versions.testRunner",
            'rules'          : "androidx.test:rules:$versions.testRules",
            'rxidler'        : "com.squareup.rx.idler:rx2-idler:$versions.rxidler",
            'mockwebserver'  : "com.squareup.okhttp3:mockwebserver:$versions.okhttp",
            'espresso'       : [
                'core': "androidx.test.espresso:espresso-core:$versions.espresso"
            ]
        ]
    ]

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$versions.agp"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:$versions.spotless"
        classpath "com.github.ben-manes:gradle-versions-plugin:$versions.gvp"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects {
    apply plugin: 'com.diffplug.spotless'

    spotless {
        kotlin {
            target "**/*.kt"
            ktlint(versions.ktlint)
        }
    }

    plugins.withId("kotlin") {
        compileKotlin {
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }
    }

    plugins.withId("kotlin-android") {
        android {
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }
    }

    def androidConfig = {
        android {
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }

            packagingOptions {
                exclude 'META-INF/*.kotlin_module'
            }
        }
    }
    plugins.withId("com.android.application", androidConfig)
    plugins.withId("com.android.library", androidConfig)
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        !isNonStable(it.currentVersion) && isNonStable(it.candidate.version)
    }
}